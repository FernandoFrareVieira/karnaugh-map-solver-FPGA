-- Copyright (C) 2018  Intel Corporation. All rights reserved.
-- Your use of Intel Corporation's design tools, logic functions 
-- and other software and tools, and its AMPP partner logic 
-- functions, and any output files from any of the foregoing 
-- (including device programming or simulation files), and any 
-- associated documentation or information are expressly subject 
-- to the terms and conditions of the Intel Program License 
-- Subscription Agreement, the Intel Quartus Prime License Agreement,
-- the Intel FPGA IP License Agreement, or other applicable license
-- agreement, including, without limitation, that your use is for
-- the sole purpose of programming logic devices manufactured by
-- Intel and sold by Intel or its authorized distributors.  Please
-- refer to the applicable agreement for further details.

-- PROGRAM		"Quartus Prime"
-- VERSION		"Version 18.1.0 Build 625 09/12/2018 SJ Lite Edition"
-- CREATED		"Mon Jun 30 20:23:51 2025"

LIBRARY ieee;
USE ieee.std_logic_1164.all; 

LIBRARY work;

ENTITY ProjetoFinal IS 
	PORT
	(
		SW0 :  IN  STD_LOGIC;
		PB0 :  IN  STD_LOGIC;
		PB1 :  IN  STD_LOGIC;
		clk :  IN  STD_LOGIC;
		reset :  IN  STD_LOGIC;
		SW9 :  IN  STD_LOGIC;
		led0 :  OUT  STD_LOGIC;
		led1 :  OUT  STD_LOGIC;
		HEX00 :  OUT  STD_LOGIC;
		HEX01 :  OUT  STD_LOGIC;
		HEX02 :  OUT  STD_LOGIC;
		HEX03 :  OUT  STD_LOGIC;
		HEX04 :  OUT  STD_LOGIC;
		HEX05 :  OUT  STD_LOGIC;
		HEX06 :  OUT  STD_LOGIC;
		HEX07 :  OUT  STD_LOGIC
	);
END ProjetoFinal;

ARCHITECTURE bdf_type OF ProjetoFinal IS 

ATTRIBUTE black_box : BOOLEAN;
ATTRIBUTE noopt : BOOLEAN;

COMPONENT mux_0
	PORT(clk_pulse_in : IN STD_LOGIC;
		 mode_select_in : IN STD_LOGIC;
		 clk_out_to_input_module : OUT STD_LOGIC;
		 clk_out_to_output_module : OUT STD_LOGIC);
END COMPONENT;
ATTRIBUTE black_box OF mux_0: COMPONENT IS true;
ATTRIBUTE noopt OF mux_0: COMPONENT IS true;

COMPONENT quine_mccluskey
	PORT(clk : IN STD_LOGIC;
		 reset : IN STD_LOGIC;
		 start : IN STD_LOGIC;
		 truth_table : IN STD_LOGIC_VECTOR(15 DOWNTO 0);
		 done : OUT STD_LOGIC;
		 num_result_terms : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
		 result_terms : OUT STD_LOGIC_VECTOR(63 DOWNTO 0)
	);
END COMPONENT;

COMPONENT debounce
	PORT(clk : IN STD_LOGIC;
		 reset : IN STD_LOGIC;
		 button_in : IN STD_LOGIC;
		 pulse_out : OUT STD_LOGIC
	);
END COMPONENT;

COMPONENT decoder_7seg_8outputs
	PORT(char_code_in : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
		 seg_a_out : OUT STD_LOGIC;
		 seg_b_out : OUT STD_LOGIC;
		 seg_c_out : OUT STD_LOGIC;
		 seg_d_out : OUT STD_LOGIC;
		 seg_e_out : OUT STD_LOGIC;
		 seg_f_out : OUT STD_LOGIC;
		 seg_g_out : OUT STD_LOGIC;
		 seg_dp_out : OUT STD_LOGIC
	);
END COMPONENT;

COMPONENT input_controller
	PORT(clk_in : IN STD_LOGIC;
		 reset_in : IN STD_LOGIC;
		 sw_data_in : IN STD_LOGIC;
		 next_pulse_in : IN STD_LOGIC;
		 key_load_in : IN STD_LOGIC;
		 start_qm_out : OUT STD_LOGIC;
		 truth_table : OUT STD_LOGIC_VECTOR(15 DOWNTO 0)
	);
END COMPONENT;

COMPONENT output_sequencer_fsm
	PORT(clk : IN STD_LOGIC;
		 reset : IN STD_LOGIC;
		 start_display : IN STD_LOGIC;
		 qm_num_terms : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
		 qm_result_terms : IN STD_LOGIC_VECTOR(63 DOWNTO 0);
		 display_done : OUT STD_LOGIC;
		 char_code_out : OUT STD_LOGIC_VECTOR(3 DOWNTO 0)
	);
END COMPONENT;

SIGNAL	SYNTHESIZED_WIRE_0 :  STD_LOGIC;
SIGNAL	SYNTHESIZED_WIRE_1 :  STD_LOGIC_VECTOR(15 DOWNTO 0);
SIGNAL	SYNTHESIZED_WIRE_2 :  STD_LOGIC_VECTOR(3 DOWNTO 0);
SIGNAL	SYNTHESIZED_WIRE_3 :  STD_LOGIC;
SIGNAL	SYNTHESIZED_WIRE_4 :  STD_LOGIC;
SIGNAL	SYNTHESIZED_WIRE_5 :  STD_LOGIC_VECTOR(3 DOWNTO 0);
SIGNAL	SYNTHESIZED_WIRE_6 :  STD_LOGIC_VECTOR(63 DOWNTO 0);
SIGNAL	SYNTHESIZED_WIRE_7 :  STD_LOGIC;


BEGIN 



b2v_algoritmo : quine_mccluskey
PORT MAP(clk => clk,
		 reset => reset,
		 start => SYNTHESIZED_WIRE_0,
		 truth_table => SYNTHESIZED_WIRE_1,
		 done => led0,
		 num_result_terms => SYNTHESIZED_WIRE_5,
		 result_terms => SYNTHESIZED_WIRE_6);


b2v_debounce : debounce
PORT MAP(clk => clk,
		 reset => reset,
		 button_in => PB0,
		 pulse_out => SYNTHESIZED_WIRE_7);


b2v_decoder : decoder_7seg_8outputs
PORT MAP(char_code_in => SYNTHESIZED_WIRE_2,
		 seg_a_out => HEX00,
		 seg_b_out => HEX01,
		 seg_c_out => HEX02,
		 seg_d_out => HEX03,
		 seg_e_out => HEX04,
		 seg_f_out => HEX05,
		 seg_g_out => HEX06,
		 seg_dp_out => HEX07);


b2v_inst : input_controller
PORT MAP(clk_in => clk,
		 reset_in => reset,
		 sw_data_in => SW0,
		 next_pulse_in => SYNTHESIZED_WIRE_3,
		 key_load_in => PB1,
		 start_qm_out => SYNTHESIZED_WIRE_0,
		 truth_table => SYNTHESIZED_WIRE_1);


b2v_inst7 : output_sequencer_fsm
PORT MAP(clk => SYNTHESIZED_WIRE_4,
		 reset => reset,
		 start_display => SW9,
		 qm_num_terms => SYNTHESIZED_WIRE_5,
		 qm_result_terms => SYNTHESIZED_WIRE_6,
		 display_done => led1,
		 char_code_out => SYNTHESIZED_WIRE_2);


b2v_mux : mux_0
PORT MAP(clk_pulse_in => SYNTHESIZED_WIRE_7,
		 mode_select_in => SW9,
		 clk_out_to_input_module => SYNTHESIZED_WIRE_3,
		 clk_out_to_output_module => SYNTHESIZED_WIRE_4);


END bdf_type;
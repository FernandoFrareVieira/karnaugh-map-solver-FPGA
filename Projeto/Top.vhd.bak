-- Copyright (C) 2018  Intel Corporation. All rights reserved.
-- ... (Cabeçalho do Quartus omitido para brevidade) ...

LIBRARY ieee;
USE ieee.std_logic_1164.all; 

LIBRARY work;

ENTITY Top IS 
    PORT
    (
        -- Entradas Físicas
        SW0     : IN  STD_LOGIC; -- Bit de dados para a tabela verdade
        PB0     : IN  STD_LOGIC; -- Botão para avançar (entrada ou saída)
        PB1     : IN  STD_LOGIC; -- Botão para carregar/iniciar o Quine-McCluskey
        clk     : IN  STD_LOGIC; -- Clock principal de 50MHz
        reset   : IN  STD_LOGIC; -- Reset global (ativo alto)
        SW9     : IN  STD_LOGIC; -- Chave de modo (0=Entrada, 1=Leitura)
        
        -- Saídas Físicas
        led0    : OUT STD_LOGIC; -- Indica que o algoritmo Q-M terminou
        led1    : OUT STD_LOGIC; -- Indica que a exibição da solução terminou
        HEX00   : OUT STD_LOGIC; -- Segmento 'a' do display
        HEX01   : OUT STD_LOGIC; -- Segmento 'b' do display
        HEX02   : OUT STD_LOGIC; -- Segmento 'c' do display
        HEX03   : OUT STD_LOGIC; -- Segmento 'd' do display
        HEX04   : OUT STD_LOGIC; -- Segmento 'e' do display
        HEX05   : OUT STD_LOGIC; -- Segmento 'f' do display
        HEX06   : OUT STD_LOGIC; -- Segmento 'g' do display
        HEX07   : OUT STD_LOGIC  -- Segmento 'dp' do display
    );
END Top;

ARCHITECTURE structural OF Top IS 

    -- Declaração de todos os componentes utilizados no projeto
    COMPONENT quine_mccluskey
        PORT(clk : IN STD_LOGIC;
             reset : IN STD_LOGIC;
             start : IN STD_LOGIC;
             truth_table : IN STD_LOGIC_VECTOR(15 DOWNTO 0);
             done : OUT STD_LOGIC;
             num_result_terms : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
             result_terms : OUT STD_LOGIC_VECTOR(63 DOWNTO 0));
    END COMPONENT;

    COMPONENT debounce
        PORT(clk : IN STD_LOGIC;
             reset : IN STD_LOGIC;
             button_in : IN STD_LOGIC;
             pulse_out : OUT STD_LOGIC);
    END COMPONENT;

    COMPONENT decoder_7seg_8outputs
        PORT(char_code_in : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
             seg_a_out : OUT STD_LOGIC;
             seg_b_out : OUT STD_LOGIC;
             seg_c_out : OUT STD_LOGIC;
             seg_d_out : OUT STD_LOGIC;
             seg_e_out : OUT STD_LOGIC;
             seg_f_out : OUT STD_LOGIC;
             seg_g_out : OUT STD_LOGIC;
             seg_dp_out : OUT STD_LOGIC);
    END COMPONENT;

    COMPONENT input_controller
        PORT(clk_in : IN STD_LOGIC;
             reset_in : IN STD_LOGIC;
             sw_data_in : IN STD_LOGIC;
             next_pulse_in : IN STD_LOGIC;
             key_load_in : IN STD_LOGIC;
             start_qm_out : OUT STD_LOGIC;
             truth_table : OUT STD_LOGIC_VECTOR(15 DOWNTO 0));
    END COMPONENT;

    COMPONENT output_sequencer_fsm
        PORT(clk : IN STD_LOGIC;
             reset : IN STD_LOGIC;
             start_display : IN STD_LOGIC;
             qm_num_terms : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
             qm_result_terms : IN STD_LOGIC_VECTOR(63 DOWNTO 0);
             display_done : OUT STD_LOGIC;
             char_code_out : OUT STD_LOGIC_VECTOR(3 DOWNTO 0));
    END COMPONENT;

    -- MUX foi renomeado para 'mux_pulses' para evitar conflito com a palavra-chave 'mux'
    COMPONENT mux
        PORT(clk_pulse_in : IN STD_LOGIC;
             mode_select_in : IN STD_LOGIC;
             clk_out_to_input_module : OUT STD_LOGIC;
             clk_out_to_output_module : OUT STD_LOGIC);
    END COMPONENT;

    -- Sinais internos para conectar os componentes
    signal pb0_pulse_s          : STD_LOGIC;
    signal pb1_pulse_s          : STD_LOGIC;
    signal pulse_to_input_s     : STD_LOGIC;
    signal pulse_to_output_s    : STD_LOGIC;
    signal start_qm_s           : STD_LOGIC;
    signal truth_table_s        : STD_LOGIC_VECTOR(15 DOWNTO 0);
    signal qm_num_terms_s       : STD_LOGIC_VECTOR(3 DOWNTO 0);
    signal qm_result_terms_s    : STD_LOGIC_VECTOR(63 DOWNTO 0);
    signal char_code_s          : STD_LOGIC_VECTOR(3 DOWNTO 0);

BEGIN 

    -- 1. Debouncers para os botões mecânicos
    debounce_pb0_inst : debounce
        PORT MAP(
            clk       => clk,
            reset     => reset,
            button_in => PB0,
            pulse_out => pb0_pulse_s
        );

    -- CORREÇÃO: Adicionado debounce para o botão PB1
    debounce_pb1_inst : debounce
        PORT MAP(
            clk       => clk,
            reset     => reset,
            button_in => PB1,
            pulse_out => pb1_pulse_s
        );

    -- 2. MUX para direcionar o pulso do PB0 com base na chave SW9
    mux_inst : mux
        PORT MAP(
            clk_pulse_in             => pb0_pulse_s,
            mode_select_in           => SW9,
            clk_out_to_input_module  => pulse_to_input_s,
            clk_out_to_output_module => pulse_to_output_s
        );

    -- 3. Controlador de Entrada: lê os dados da tabela verdade
    input_controller_inst : input_controller
        PORT MAP(
            clk_in        => clk,
            reset_in      => reset,
            sw_data_in    => SW0,
            next_pulse_in => pulse_to_input_s,
            key_load_in   => pb1_pulse_s, -- Usa o pulso "limpo"
            start_qm_out  => start_qm_s,
            truth_table   => truth_table_s
        );

    -- 4. Algoritmo Quine-McCluskey
    qm_inst : quine_mccluskey
        PORT MAP(
            clk              => clk,
            reset            => reset,
            start            => start_qm_s,
            truth_table      => truth_table_s,
            done             => led0, -- Saída direta para o LED
            num_result_terms => qm_num_terms_s,
            result_terms     => qm_result_terms_s
        );

    -- 5. Sequenciador de Saída: controla a exibição da solução
    output_fsm_inst : output_sequencer_fsm
        PORT MAP(
            clk             => clk,             -- CORREÇÃO: Conectado ao clock principal
            reset           => reset,
            start_display   => pulse_to_output_s, -- CORREÇÃO: Usa o pulso do botão, não a chave
            qm_num_terms    => qm_num_terms_s,
            qm_result_terms => qm_result_terms_s,
            display_done    => led1,            -- Saída direta para o LED
            char_code_out   => char_code_s
        );

    -- 6. Decodificador para o Display de 7 Segmentos
    decoder_inst : decoder_7seg_8outputs
        PORT MAP(
            char_code_in => char_code_s,
            seg_a_out    => HEX00,
            seg_b_out    => HEX01,
            seg_c_out    => HEX02,
            seg_d_out    => HEX03,
            seg_e_out    => HEX04,
            seg_f_out    => HEX05,
            seg_g_out    => HEX06,
            seg_dp_out   => HEX07
        );

END structural;
